const requestIp = require('request-ip');
const useragent = require('express-useragent');
const cookieOnly = require('cookie');
const { Database } = require('./db');
const { functions } = require('./BaiscModules');
const { GuestVisit } = require('./GVisit');

const UserVisit = {};
UserVisit.initialize = async (req, res) => {
    const checkCookieResult = await UserVisit.checkCookie(req);
    if (checkCookieResult.status) {
        req.session.GSI = null;
        res.clearCookie('GID');
        var userID = checkCookieResult.log;
        const sessionStatus = await UserVisit.checkSession(req.session.USI);
        if (sessionStatus) {
            await UserVisit.updateVisits(req.session.USI, req);
        } else {
            await UserVisit.createSession(userID, req);
        }
    }
}

UserVisit.checkCookie = async (req)=>{
  const userID = req.cookies.UID;
  const database = await Database.connect();
  if(database.status){
    const conn = database.conn;
    const collection = conn.collection('Users');
    const decUserID = functions.decrypt(userID);
    const result = await collection.findOne({ uID: decUserID });
    if (result ) {
      return {status:true, log:decUserID};
    }else{
      return {status:false, log:"No User Found"};
    }
  }
  await Database.disconnect();
}

UserVisit.createSession = async (userID, req)=>{
  var sessionID = await functions.createNewID("Sessions", "US", 'sID');
  if (!sessionID.status) {
    return false;
  }
  sessionID = sessionID.log;
  const database = await Database.connect();
  if(database.status){
    const conn = database.conn;
    const collection = conn.collection('Sessions');
    req.session.USI = sessionID;
    const guestIP = req.clientIp;
    const date = new Date().toISOString().split('T')[0];
    const visitedPage = req.originalUrl;
    const visitTime = Math.floor(Date.now() / 1000);
    const sessionData = {
      date: date,
      sID: sessionID,
      pID: userID,
      ipAdd: guestIP,
      vCont: 1,
      vPge: [visitedPage],
      vTme: [visitTime]

    };
    await collection.insertOne(sessionData);
  }
  await Database.disconnect();
}

UserVisit.updateVisits = async (sessionID, req)=> {
  const visitedPage = req.originalUrl;
  if (visitedPage == '/env' || visitedPage == '/favicon.ico') {
    return false;
  }
  const database = await Database.connect();
  if(database.status){
    const conn = database.conn;
    const collection = conn.collection('Sessions');
    const visitTime = Math.floor(Date.now() / 1000);
    const visitedPage = req.originalUrl;
    const fetchData = await collection.findOne({sID: sessionID})
    var newVisitCount = fetchData.vCont + 1;
    await collection.updateOne(
      { sID: sessionID },
      {
          $set: { vCont: newVisitCount },
          $push: { 
            vPge: visitedPage,
            vTme: visitTime 
          }
      }
  );
  }
  await Database.disconnect();
}
  
UserVisit.existInDB = async (uID)=> {
    const database = await Database.connect();
    if(database.status){
      const conn = database.conn;
      const collection = conn.collection('Guests');
      const result = await collection.findOne({ uID: uID });
      return !!result; // Convert result to boolean and return
    }else{
      return false;
    }
    await Database.disconnect();
}

UserVisit.sessionExist = async (req)=> {
  const sessionPresent = {};
  if (req.session.USI) {
      const session = req.session.USI;
      if (await UserVisit.checkSession(session)) {
          sessionPresent.status = true;
          sessionPresent.log = session;
      } else {
          sessionPresent.status = false;
          sessionPresent.log = "New Session detected";
      }
  } else {
      sessionPresent.status = false;
      sessionPresent.log = "Session does not exist";
  }

  return sessionPresent;
}

UserVisit.checkSession = async (sess) => {
  const database = await Database.connect();
    if(database.status){
      const conn = database.conn;
      const collection = conn.collection('Sessions');
      const result = await collection.findOne({ sID: sess });
      if (result) {
          return true;
      } else{
          return false;
      }
    }
    await Database.disconnect();
}

module.exports = {UserVisit};